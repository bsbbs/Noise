# cmap1 <- cmap}
# if (ti == 2){cmap <- colorRampPalette(c("blue", rgb(0, 1, 128/255)))(length(early))
# cmap2 <- cmap}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[1],]$choice
if ((ti == 1) || modeli == 4)
{plot(v3vec, choice, type = "n", xlim = c(0, V2mean), ylim = yrng,  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Late noise %1.2f", late[ti]))
axis(1, at = c(seq(0, V1mean, 20)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = yticks, padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)}
for (ri in seq_along(early)) {
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[ri],]$choice
lines(v3vec, choice, type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 3)
}
points(c(V1mean, V2mean), c(yrng[1], yrng[1]), pch = 25, col = NA, bg = gray(.5), cex = .8)
}
if (modeli == 4)
{legend('topleft', c('0','.07','.14','.21','.28','.35'), lty = 1, ncol = 1,  col = c(cmap1, cmap2))
dev.copy(pdf, file.path(out_dir,sprintf('CardinalView_Model%i_v4.pdf', modeli)), height=4.4, width=7.7)} # height=3.53, width=6.18 # 8.05
if (modeli < 4){dev.copy(pdf, file.path(out_dir,sprintf('CardinalView_Model%i_v4.pdf', modeli)), height=3.53, width=3.24)} #3.71，3.4
dev.off()
}
smdir <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/Fig4'
V1mean <- 88
V2mean <- 83
for (modeli in 1:4)
{
prdct <- read.table(file = file.path(smdir, sprintf('Ratio_Model%i_50v3max83_6lines.txt', modeli)), header = TRUE)
v3vec <- unique(prdct$V3) # seq(0, V2mean, length.out = 50)
early <- unique(prdct$Early) #seq(0, .35, length.out = 6)*V2mean
late <- unique(prdct$Late) #c(1, 1.4286)
if (modeli == 1){yrng <- c(75, 95)
yticks <- seq(75,95,5)}
if (modeli == 2){yrng <- c(70, 77)
yticks <- seq(71,77,2)}
if (modeli == 3){yrng <- c(75, 95)
yticks <- seq(75,95,5)}
if (modeli == 4){yrng <- c(60, 75)
yticks <- seq(60,75,5)}
if (modeli == 4){par(mfrow = c(1, 2))}
for (ti in seq_along(late))
{
# Plotting
if (ti == 1){cmap <- colors_cool #mycols[1:length(early) + length(mycols)-length(early)]
cmap1 <- cmap}
if (ti == 2){cmap <- colors_cool #mycols[1:length(early)]
cmap2 <- cmap}
# if (ti == 1){cmap <- colorRampPalette(c(rgb(1, 191/255, 0), "red"))(length(early))
# cmap1 <- cmap}
# if (ti == 2){cmap <- colorRampPalette(c("blue", rgb(0, 1, 128/255)))(length(early))
# cmap2 <- cmap}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[1],]$choice
if ((ti == 1) || modeli == 4)
{plot(v3vec, choice, type = "n", xlim = c(0, V2mean), ylim = yrng,  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Late noise %1.2f", late[ti]))
axis(1, at = c(seq(0, V1mean, 20)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = yticks, padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)}
for (ri in seq_along(early)) {
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[ri],]$choice
lines(v3vec, choice, type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 3)
}
points(c(V1mean, V2mean), c(yrng[1], yrng[1]), pch = 25, col = NA, bg = gray(.5), cex = .8)
}
if (modeli == 4)
{legend('topleft', c('0','.07','.14','.21','.28','.35'), lty = 1, ncol = 1,  col = cmap1)
dev.copy(pdf, file.path(out_dir,sprintf('CardinalView_Model%i_v4.pdf', modeli)), height=4.4, width=7.7)} # height=3.53, width=6.18 # 8.05
if (modeli < 4){dev.copy(pdf, file.path(out_dir,sprintf('CardinalView_Model%i_v4.pdf', modeli)), height=3.53, width=3.24)} #3.71，3.4
dev.off()
}
prdct <- read.table(file = '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise/Ratio_Model4_MeanScaled_V1_88_sd1_4.5_50V3max83_6lines.txt', header = TRUE)
out_dir <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise'
V1mean <- 88
V2mean <- 83
v3vec <- unique(prdct$V3)
early <- unique(prdct$Early)
late <- unique(prdct$Late)
par(mfrow = c(1,2))
for (ti in seq_along(late))
{
# Plotting
if (ti == 1){cmap <- colors_cool #mycols[1:length(early) + length(mycols)-length(early)]
cmap1 <- cmap
yrng <- c(73,77)
yticks <- 73:77}
if (ti == 2){cmap <- colors_cool #mycols[1:length(early)]
cmap2 <- cmap
yrng <- c(68.7,71)
yticks <- 69:71}
# if (ti == 1){cmap <- colorRampPalette(c(rgb(1, 191/255, 0), "red"))(length(early))
# cmap1 <- cmap}
# if (ti == 2){cmap <- colorRampPalette(c("blue", rgb(0, 1, 128/255)))(length(early))
# cmap2 <- cmap}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[1],]$choice
if ((ti == 1) || modeli == 4)
{plot(v3vec, choice, type = "n", xlim = c(0, V1mean), ylim = yrng,  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Late noise %1.2f", late[ti]))
axis(1, at = c(seq(0, V1mean, 20)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = yticks, padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)}
for (ri in seq_along(early)) {
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[ri],]$choice
lines(v3vec, choice, type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 3)
}
points(c(V1mean, V2mean), c(yrng[1], yrng[1]), pch = 25, col = NA, bg = gray(.5), cex = .8)
}
# legend('topleft', rep(c('0','1.8','3.6','5.3','7.2','9.0'), 2), lty = 1, ncol = 2,  col = c(cmap1, cmap2))
dev.copy(pdf, file.path(out_dir,sprintf('Model4_Theoritical.pdf')), height=4.4, width=7.7)
dev.off()
prdct <- read.table(file = '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise/Ratio_Model4_MeanScaled_V1_88_sd1_4.5_50V3max83_6lines.txt', header = TRUE)
out_dir <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise'
V1mean <- 88
V2mean <- 83
v3vec <- unique(prdct$V3)
early <- unique(prdct$Early)
late <- unique(prdct$Late)
par(mfrow = c(1,2))
for (ti in seq_along(late))
{
# Plotting
if (ti == 1){cmap <- colors_warm #mycols[1:length(early) + length(mycols)-length(early)]
cmap1 <- cmap
yrng <- c(73,77)
yticks <- 73:77}
if (ti == 2){cmap <- colors_warm #mycols[1:length(early)]
cmap2 <- cmap
yrng <- c(68.7,71)
yticks <- 69:71}
# if (ti == 1){cmap <- colorRampPalette(c(rgb(1, 191/255, 0), "red"))(length(early))
# cmap1 <- cmap}
# if (ti == 2){cmap <- colorRampPalette(c("blue", rgb(0, 1, 128/255)))(length(early))
# cmap2 <- cmap}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[1],]$choice
if ((ti == 1) || modeli == 4)
{plot(v3vec, choice, type = "n", xlim = c(0, V1mean), ylim = yrng,  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Late noise %1.2f", late[ti]))
axis(1, at = c(seq(0, V1mean, 20)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = yticks, padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)}
for (ri in seq_along(early)) {
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[ri],]$choice
lines(v3vec, choice, type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 3)
}
points(c(V1mean, V2mean), c(yrng[1], yrng[1]), pch = 25, col = NA, bg = gray(.5), cex = .8)
}
# legend('topleft', rep(c('0','1.8','3.6','5.3','7.2','9.0'), 2), lty = 1, ncol = 2,  col = c(cmap1, cmap2))
dev.copy(pdf, file.path(out_dir,sprintf('Model4_Theoritical.pdf')), height=4.4, width=7.7)
dev.off()
prdct <- read.table(file = '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise/Ratio_Model4_MeanScaled_V1_88_sd1_4.5_50V3max83_6lines.txt', header = TRUE)
out_dir <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise'
V1mean <- 88
V2mean <- 83
v3vec <- unique(prdct$V3)
early <- unique(prdct$Early)
late <- unique(prdct$Late)
par(mfrow = c(1,2))
for (ti in seq_along(late))
{
# Plotting
if (ti == 1){cmap <- colors_warm #mycols[1:length(early) + length(mycols)-length(early)]
cmap1 <- cmap
yrng <- c(73,77)
yticks <- 73:77}
if (ti == 2){cmap <- colors_warm #mycols[1:length(early)]
cmap2 <- cmap
yrng <- c(68.7,71)
yticks <- 69:71}
# if (ti == 1){cmap <- colorRampPalette(c(rgb(1, 191/255, 0), "red"))(length(early))
# cmap1 <- cmap}
# if (ti == 2){cmap <- colorRampPalette(c("blue", rgb(0, 1, 128/255)))(length(early))
# cmap2 <- cmap}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[1],]$choice
if ((ti == 1) || modeli == 4)
{plot(v3vec, choice, type = "n", xlim = c(0, V1mean), ylim = yrng,  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Late noise %1.2f", late[ti]))
axis(1, at = c(seq(0, V1mean, 20)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = yticks, padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)}
for (ri in seq_along(early)) {
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[ri],]$choice
lines(v3vec, choice, type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 3)
}
points(c(V1mean, V2mean), c(yrng[1], yrng[1]), pch = 25, col = NA, bg = gray(.5), cex = .8)
}
legend('topleft', c('0','1.8','3.6','5.3','7.2','9.0'), lty = 1, ncol = 1,  col = cmap1)
dev.copy(pdf, file.path(out_dir,sprintf('Model4_Theoritical.pdf')), height=4.4, width=7.7)
dev.off()
if (ri == 4) {mycol <- 1, width = 1}
if (ri == 4) {mycol <- 'black', width = 1}
if (ri == 4) {mycol <- 'black', width <- 1}
prdct <- read.table(file = '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise/Ratio_Model1_MeanScaled_V1_88_sd1_4.5_50V3max83_.txt', header = TRUE)
out_dir <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Prediction/MeanScaledNoise'
V1mean <- 88
V2mean <- 83
v3vec <- unique(prdct$V3)
early <- unique(prdct$Early)
late <- unique(prdct$Late)
par(mfrow = c(1,2))
for (ti in seq_along(late))
{
# Plotting
if (ti == 1){cmap <- colors_warm #mycols[1:length(early) + length(mycols)-length(early)]
cmap1 <- cmap
yrng <- c(73,77)
yticks <- 73:77}
if (ti == 2){cmap <- colors_warm #mycols[1:length(early)]
cmap2 <- cmap
yrng <- c(68.7,71)
yticks <- 69:71}
# if (ti == 1){cmap <- colorRampPalette(c(rgb(1, 191/255, 0), "red"))(length(early))
# cmap1 <- cmap}
# if (ti == 2){cmap <- colorRampPalette(c("blue", rgb(0, 1, 128/255)))(length(early))
# cmap2 <- cmap}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[1],]$choice
if ((ti == 1) || modeli == 4)
{plot(v3vec, choice, type = "n", xlim = c(0, V1mean), ylim = yrng,  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Late noise %1.2f", late[ti]))
axis(1, at = c(seq(0, V1mean, 20)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = yticks, padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)}
for (ri in seq_along(early)) {
if (ri <= 3) {mycol <- cmap[ri]
lwidth <- 3}
if (ri == 4) {mycol <- 'black'
lwidth <- 1}
if (ri >= 5) {mycol <- cmap[ri-1]
lwidth <- 3}
choice <- prdct[prdct$Late == late[ti] & prdct$Early == early[ri],]$choice
lines(v3vec, choice, type = "l", col = mycol, pch = 20, cex = .5, lwd = lwidth)
}
points(c(V1mean, V2mean), c(yrng[1], yrng[1]), pch = 25, col = NA, bg = gray(.5), cex = .8)
}
legend('topleft', c('0','1.8','3.6','5.3','7.2','9.0'), lty = 1, ncol = 1,  col = cmap1)
dev.copy(pdf, file.path(out_dir,sprintf('Model4_Theoritical.pdf')), height=4.4, width=7.7)
dev.off()
Analysis <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Modelfit'
out_dir <- file.path(Analysis,'plot')
if (!dir.exists(out_dir)){dir.create(out_dir)}
fastbads <- read.table(file.path(Analysis,'BestRslts.txt'), header = TRUE, sep = '\t')
demograph <- read.csv('/Users/bs3667/Noise/myData/Demographics.csv', header = TRUE)
fastbads$subID <- as.factor(fastbads$subID)
sublist <- unique(fastbads$subID)
fastbads$name <- factor(fastbads$name, levels = c('McFadden','LinearDistrb','DN','dDNb','dDNd'))
names <- levels(fastbads$name)
fastbads$modeli <- as.factor(fastbads$modeli)
fastbads <- merge(fastbads, demograph, by = 'subID')
str(fastbads)
# convert AIC and BIC
ICpool <- c()
for (si in 1:length(sublist))
{
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice)) # number of data points
for (mdli in 1:5) # number of parameters
{
if (mdli == 1){k <- 2}
if (mdli == 2 | mdli == 3){k <- 3}
if (mdli >= 4){k <- 4}
nLL <- fastbads$nll[fastbads$subID == sublist[si] & fastbads$modeli == mdli]
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
ICpool <- rbind(ICpool, data.frame(subID = sublist[si], modeli = mdli, AIC = AIC, BIC = BIC))
}
}
Analysis <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Modelfit'
sublist
for (mdli in 1:4)
{
mtmodel <- read.table(file.path(Analysis,sprintf('Model%i_Predict.txt', mdli)), header = TRUE, sep = '\t')
mtmodel$Group <- as.factor(mtmodel$Group)
mtmodel$subID <- as.factor(mtmodel$subID)
mtmodel$Vagueness <- as.factor(mtmodel$Vagueness)
mtmodel$TimePressure <- as.factor(mtmodel$TimePressure)
subID <- unique(mtmodel$subID)
Vagueness <- unique(mtmodel$Vagueness)
TimePressure <- unique(mtmodel$TimePressure)
AccID3sim <- c()
for (s in 1:length(subID))
{
indvdat <- mtmodel[mtmodel$subID == subID[s],]
vi <- 0
for (v in Vagueness)
{
vi <- vi + 1
tpi <- 0
for (tp in TimePressure)
{
tpi <- tpi + 1
sectdat <- indvdat[indvdat$TimePressure == tp & indvdat$Vagueness == v,]
acc <- aggregate(ratio ~ ID3, data = sectdat, FUN = mean)
colnames(acc) <- c('ID3','acc')
acc$acc <- acc$acc*100
#V3scld <- aggregate(V3scld ~ ID3, data = sectdat, FUN = mean)
#sdbid <- aggregate(sdV3scld ~ ID3, data = sectdat, FUN = mean)
V3scld <- aggregate(V3 ~ ID3, data = sectdat, FUN = mean)
colnames(V3scld) <- c('ID3','V3scld')
sdbid <- aggregate(sdV3 ~ ID3, data = sectdat, FUN = mean)
colnames(sdbid) <- c('ID3','sdV3scld')
Ntrial <- aggregate(trial ~ ID3, data = sectdat, FUN = length)
colnames(Ntrial) <- c('ID3','Ntrial')
onesect <- merge(acc, V3scld, by = 'ID3')
onesect <- merge(onesect, sdbid, by = 'ID3')
onesect <- merge(onesect, Ntrial, by = 'ID3')
AccID3sim <- rbind(AccID3sim, data.frame(subID = subID[s], Vagueness = v, TimePressure = tp, onesect))
}
}
}
Window <- 0.25
Bindow <- .07
LowestV3 <- 0
HighestV3 <- 1
NtrialThresh <- 20
t_values <- c('Low', 'High')
v3vec <- seq(LowestV3, HighestV3, by = .03)
sdvec <- seq(0, .35, by = .07)
# Define the color matrix
mycols <- matrix(c(0, 0, 1.0000,
0, 0.3333, 0.8333,
0, 0.6667, 0.6667,
0, 1.0000, 0.5000,
1.0000, 0.7500, 0,
1.0000, 0.5000, 0,
1.0000, 0.2500, 0,
1.0000, 0, 0),
ncol = 3, byrow = TRUE)
mycols <- apply(mycols, 1, function(x) rgb(x[1], x[2], x[3]))
# Create a new figure
par(mfrow = c(1, 2))
ti <- 0
for (t in t_values) {
ti <- ti + 1
# Filter data
dat <- AccID3sim[AccID3sim$V3scld <= HighestV3 & AccID3sim$V3scld >= LowestV3 & AccID3sim$TimePressure == t,]
# Initialize matrices
Ntrial <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
choice <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
choicese <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
sdbid3scld <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
for (vi in seq_along(v3vec)) {
for (ri in seq_along(sdvec)) {
v3 <- v3vec[vi]
r <- sdvec[ri]
maskv3 <- dat$V3scld >= (v3 - Window) & dat$V3scld <= (v3 + Window)
maskr3 <- dat$sdV3scld >= (r - Bindow) & dat$sdV3scld <= (r + Bindow)
section <- dat[maskv3 & maskr3, ]
Ntrial[ri, vi] <- sum(section$Ntrial)
if (Ntrial[ri, vi] > NtrialThresh)
{choice[ri, vi] <- mean(section$acc)
choicese[ri, vi] <- sd(section$acc) / sqrt(length(section$acc))
sdbid3scld[ri, vi] <- mean(section$sdV3scld)}
}
}
# Plotting
if (ti == 1){cmap <- colors_cool #mycols[1:length(sdvec) + length(mycols)-length(sdvec)]
cmap1 <- cmap}
if (ti == 2){cmap <- colors_cool #mycols[1:length(sdvec)]
cmap2 <- cmap}
plot(v3vec, choice[1, ], type = "n", ylim = c(60, 75),  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Time limit %s", t))
axis(1, at = c(seq(LowestV3, HighestV3, .2)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = seq(55, 75, 5), padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "Scaled V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
for (ri in seq_along(sdvec)) {
thresh <- Ntrial[ri,] > NtrialThresh
lines(v3vec[thresh], choice[ri, thresh], type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 2)
}
}
# legend('topleft', rep(c('0','.07','.14','.21','.28','.35'),2), lty = 1, ncol = 2,  col = c(cmap1, cmap2))
dev.copy(pdf, file.path(out_dir,sprintf('CardinalView_Model%i_V3scld_L%.1fH%.1fv4.pdf', mdli, LowestV3, HighestV3)), height=4.4, width=7.7)
dev.off()
}
Analysis
## Post predictive check
mtmodel <- read.table(file.path(Analysis,sprintf('Model4_Predict.txt')), header = TRUE, sep = '\t')
mtmodel$Group <- as.factor(mtmodel$Group)
mtmodel$subID <- as.factor(mtmodel$subID)
mtmodel$Vagueness <- as.factor(mtmodel$Vagueness)
mtmodel$TimePressure <- as.factor(mtmodel$TimePressure)
subID <- unique(mtmodel$subID)
Vagueness <- unique(mtmodel$Vagueness)
TimePressure <- unique(mtmodel$TimePressure)
AccID3sim <- c()
for (s in 1:length(subID))
{
indvdat <- mtmodel[mtmodel$subID == subID[s],]
vi <- 0
for (v in Vagueness)
{
vi <- vi + 1
tpi <- 0
for (tp in TimePressure)
{
tpi <- tpi + 1
sectdat <- indvdat[indvdat$TimePressure == tp & indvdat$Vagueness == v,]
acc <- aggregate(ratio ~ ID3, data = sectdat, FUN = mean)
colnames(acc) <- c('ID3','acc')
acc$acc <- acc$acc*100
#V3scld <- aggregate(V3scld ~ ID3, data = sectdat, FUN = mean)
#sdbid <- aggregate(sdV3scld ~ ID3, data = sectdat, FUN = mean)
V3scld <- aggregate(V3 ~ ID3, data = sectdat, FUN = mean)
colnames(V3scld) <- c('ID3','V3scld')
sdbid <- aggregate(sdV3 ~ ID3, data = sectdat, FUN = mean)
colnames(sdbid) <- c('ID3','sdV3scld')
Ntrial <- aggregate(trial ~ ID3, data = sectdat, FUN = length)
colnames(Ntrial) <- c('ID3','Ntrial')
onesect <- merge(acc, V3scld, by = 'ID3')
onesect <- merge(onesect, sdbid, by = 'ID3')
onesect <- merge(onesect, Ntrial, by = 'ID3')
AccID3sim <- rbind(AccID3sim, data.frame(subID = subID[s], Vagueness = v, TimePressure = tp, onesect))
}
}
}
Window <- 0.25
Bindow <- .07
LowestV3 <- 0
HighestV3 <- 1
NtrialThresh <- 20
t_values <- c('Low', 'High')
v3vec <- seq(LowestV3, HighestV3, by = .03)
sdvec <- seq(0, .35, by = .07)
# Define the color matrix
mycols <- matrix(c(0, 0, 1.0000,
0, 0.3333, 0.8333,
0, 0.6667, 0.6667,
0, 1.0000, 0.5000,
1.0000, 0.7500, 0,
1.0000, 0.5000, 0,
1.0000, 0.2500, 0,
1.0000, 0, 0),
ncol = 3, byrow = TRUE)
mycols <- apply(mycols, 1, function(x) rgb(x[1], x[2], x[3]))
# Create a new figure
par(mfrow = c(1, 2))
ti <- 0
for (t in t_values) {
ti <- ti + 1
# Filter data
dat <- AccID3sim[AccID3sim$V3scld <= HighestV3 & AccID3sim$V3scld >= LowestV3 & AccID3sim$TimePressure == t,]
# Initialize matrices
Ntrial <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
choice <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
choicese <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
sdbid3scld <- matrix(NA, nrow = length(sdvec), ncol = length(v3vec))
for (vi in seq_along(v3vec)) {
for (ri in seq_along(sdvec)) {
v3 <- v3vec[vi]
r <- sdvec[ri]
maskv3 <- dat$V3scld >= (v3 - Window) & dat$V3scld <= (v3 + Window)
maskr3 <- dat$sdV3scld >= (r - Bindow) & dat$sdV3scld <= (r + Bindow)
section <- dat[maskv3 & maskr3, ]
Ntrial[ri, vi] <- sum(section$Ntrial)
if (Ntrial[ri, vi] > NtrialThresh)
{choice[ri, vi] <- mean(section$acc)
choicese[ri, vi] <- sd(section$acc) / sqrt(length(section$acc))
sdbid3scld[ri, vi] <- mean(section$sdV3scld)}
}
}
# Plotting
if (ti == 1){cmap <- colors_cool #mycols[1:length(sdvec) + length(mycols)-length(sdvec)]
cmap1 <- cmap}
if (ti == 2){cmap <- colors_cool #mycols[1:length(sdvec)]
cmap2 <- cmap}
plot(v3vec, choice[1, ], type = "n", ylim = c(60, 75),  xlab=' ', ylab=' ',
axes = FALSE, frame.plot = FALSE, main = sprintf("Time limit %s", t))
axis(1, at = c(seq(LowestV3, HighestV3, .2)),  tck = -0.02, padj = -1, cex.axis = 1)
axis(2, tck = -0.02, at = seq(55, 75, 5), padj = 1, cex.axis = 1)
title(ylab = '% Correct | V1, V2', mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
title(xlab = "Scaled V3", mgp = c(1.5,0,0), font.lab = 1, cex.lab = 1)
for (ri in seq_along(sdvec)) {
thresh <- Ntrial[ri,] > NtrialThresh
lines(v3vec[thresh], choice[ri, thresh], type = "l", col = cmap[ri], pch = 20, cex = .5, lwd = 2)
}
}
# legend('topleft', rep(c('0','.07','.14','.21','.28','.35'),2), lty = 1, ncol = 2,  col = c(cmap1, cmap2))
dev.copy(pdf, file.path(out_dir,sprintf('CardinalView_Model4_V3scld_L%.1fH%.1fv4.pdf', LowestV3, HighestV3)), height=4.4, width=7.7)
dev.off()
AccID3sim
Analysis
Analysis <- '/Users/bs3667/NYU Langone Health Dropbox/Shen Bo/Bo Shen Working files/NoiseProject/Modelfit'
out_dir <- file.path(Analysis,'plot')
if (!dir.exists(out_dir)){dir.create(out_dir)}
fastbads <- read.table(file.path(Analysis,'BestRslts.txt'), header = TRUE, sep = '\t')
demograph <- read.csv('/Users/bs3667/Noise/myData/Demographics.csv', header = TRUE)
fastbads$subID <- as.factor(fastbads$subID)
sublist <- unique(fastbads$subID)
fastbads$name <- factor(fastbads$name, levels = c('McFadden','LinearDistrb','DN','dDNb','dDNd'))
names <- levels(fastbads$name)
fastbads$modeli <- as.factor(fastbads$modeli)
fastbads <- merge(fastbads, demograph, by = 'subID')
str(fastbads)
# convert AIC and BIC
ICpool <- c()
for (si in 1:length(sublist))
{
N <- sum(grpdcsn$subID == subID[si] & !is.na(grpdcsn$choice)) # number of data points
for (mdli in 1:5) # number of parameters
{
if (mdli == 1){k <- 2}
if (mdli == 2 | mdli == 3){k <- 3}
if (mdli >= 4){k <- 4}
nLL <- fastbads$nll[fastbads$subID == sublist[si] & fastbads$modeli == mdli]
AIC <- 2*k + 2*nLL
BIC <- k*log(N) + 2*nLL
ICpool <- rbind(ICpool, data.frame(subID = sublist[si], modeli = mdli, AIC = AIC, BIC = BIC))
}
}
